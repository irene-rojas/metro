{"version":3,"sources":["logo.png","Trains/Trains.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Trains","props","react_default","a","createElement","className","concat","line","id","destination","min","cars","App","state","metroData","selectedStation","onChange","event","preventDefault","_this","setState","target","value","console","log","onSubmit","axios","get","headers","api_key","String","process","then","res","data","this","multiple","onClick","map","train","index","src_Trains_Trains","key","Line","DestinationName","location","LocationName","Min","Car","href","src","logo","alt","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.adac4b76.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.12a2e3e2.png\";","import React from 'react';\nimport \"./Trains.css\";\n\nconst Trains = (props) => {\n\n    return (\n\n        <figure className={`train train_${props.line}`}>\n\n                <div id=\"destination\">\n                    Destination:\n                    <br/>\n                    {props.destination}\n                </div>\n\n                <div id=\"arrival\">\n                    Arrival:\n                    <br/>\n                    {props.min} min\n                </div>\n\n                <div id=\"cars\">\n                    Cars:\n                    <br/>\n                    {props.cars}\n                </div>\n        \n        </figure>\n\n    )\n\n}\n\nexport default Trains;","import React, { Component } from 'react';\nimport './App.css';\nimport axios from \"axios\";\nimport Trains from \"./Trains/Trains\";\nimport logo from \"./logo.png\";\n\nclass App extends Component {\n\n    state = {\n        metroData: [],\n        selectedStation: \"\"\n    }\n\n    onChange = (event) => {\n        event.preventDefault();\n        this.setState({\n            selectedStation: event.target.value\n        }, () => { \n            console.log(this.state.selectedStation);\n        });\n    }\n\n    // train predictions api\n    onSubmit = () => {\n        axios.get(`https://api.wmata.com/StationPrediction.svc/json/GetPrediction/${this.state.selectedStation}`, {\n            headers: {\n                \"api_key\": String(process.env.REACT_APP_METRO_KEY)\n            }\n        })\n        .then(res => {\n            this.setState({\n                metroData: res.data.Trains\n            });\n            console.log(this.state.metroData);\n        })\n    }\n\n\n  render() {\n    return (\n      <main className=\"App\">\n\n        <header className=\"header\">\n            <h1 className=\"whereTrain\">Where's The Train?</h1>\n            <br/>\n            <p className=\"infoGuide\">A guide for navigating DC Metrorail</p>\n        </header>\n\n        <div className=\"stations\">\n            <form className=\"stationSelect\">\n                <select className=\"dropdown\" value={this.state.selectedStation} onChange={this.onChange}>\n\n                    <option>Select A Station</option>\n                    <option value=\"G03\">Addison Road-Seat Pleasant</option>\n                    <option value=\"F06\">Anacostia</option>\n                    <option value=\"F02\">Archives-Navy Memorial-Penn Quarter</option>\n                    <option value=\"C06\">Arlington Cemetery</option>\n                    <option value=\"K04\">Ballston-MU</option>\n                    <option value=\"G01\">Benning Road</option>\n                    <option value=\"A09\">Bethesda</option>\n                    <option value=\"C12\">Braddock Road</option>\n                    <option value=\"F11\">Branch Ave (Final Station)</option>\n                    <option value=\"B05\">Brookland-CUA</option>\n                    <option value=\"G02\">Capitol Heights</option>\n                    <option value=\"D05\">Capitol South</option>\n                    <option value=\"D11\">Cheverly</option>\n                    <option value=\"K02\">Clarendon</option>\n                    <option value=\"A05\">Cleveland Park</option>\n                    <option value=\"E09\">College Park-U of Md</option>\n                    <option value=\"E04\">Columbia Heights</option>\n                    <option value=\"F07\">Congress Heights</option>\n                    <option value=\"K01\">Court House</option>\n                    <option value=\"C09\">Crystal City</option>\n                    <option value=\"D10\">Deanwood</option>\n                    <option value=\"K07\">Dunn Loring-Merrifield</option>\n                    <option value=\"A03\">Dupont Circle</option>\n                    <option value=\"K05\">East Falls Church</option>\n                    <option value=\"D06\">Eastern Market</option>\n                    <option value=\"C14\">Eisenhower Avenue</option>\n                    <option value=\"A02\">Farragut North</option>\n                    <option value=\"C03\">Farragut West</option>\n                    <option value=\"D04\">Federal Center SW</option>\n                    <option value=\"D01\">Federal Triangle</option>\n                    <option value=\"C04\">Foggy Bottom-GWU</option>\n                    <option value=\"B09\">Forest Glen</option>\n                    <option multiple={true} value={[\"B06\",\"E06\"]}>Fort Totten (Final Station - Yellow)</option>\n                    <option value=\"J03\">Franconia-Springfield (Final Station - Blue)</option>\n                    <option value=\"A08\">Friendship Heights</option>\n                    <option multiple={true} value={[\"B01\",\"F01\"]}>Gallery Pl-Chinatown</option>\n                    <option value=\"E05\">Georgia Ave-Petworth</option>\n                    <option value=\"B11\">Glenmont (Final Station - Red)</option>\n                    <option value=\"E10\">Greenbelt (Final Station - Green)</option>\n                    <option value=\"N03\">Greensboro</option>\n                    <option value=\"A11\">Grosvenor-Strathmore</option>\n                    <option value=\"C15\">Huntington (Final Station - Yellow)</option>\n                    <option value=\"B02\">Judiciary Square</option>\n                    <option value=\"C13\">King St-Old Town</option>\n                    <option multiple={true} value={[\"D03\",\"F03\"]}>L'Enfant Plaza</option>\n                    <option value=\"D12\">Landover</option>\n                    <option value=\"G05\">Largo Town Center (Final Station - Blue, Silver)</option>\n                    <option value=\"N01\">McLean</option>\n                    <option value=\"C02\">McPherson Square</option>\n                    <option value=\"A10\">Medical Center</option>\n                    <option multiple={true} value={[\"A01\",\"C01\"]}>Metro Center</option>\n                    <option value=\"D09\">Minnesota Ave</option>\n                    <option value=\"G04\">Morgan Boulevard</option>\n                    <option value=\"E01\">Mt Vernon Sq 7th St-Convention Center</option>\n                    <option value=\"F05\">Navy Yard-Ballpark</option>\n                    <option value=\"F09\">Naylor Road</option>\n                    <option value=\"D13\">New Carrollton (Final Station - Orange)</option>\n                    <option value=\"B35\">NoMa-Gallaudet U</option>\n                    <option value=\"C07\">Pentagon</option>\n                    <option value=\"C08\">Pentagon City</option>\n                    <option value=\"D07\">Potomac Ave</option>\n                    <option value=\"E08\">Prince George's Plaza</option>\n                    <option value=\"B04\">Rhode Island Ave-Brentwood</option>\n                    <option value=\"A14\">Rockville</option>\n                    <option value=\"C10\">Ronald Reagan Washington National Airport</option>\n                    <option value=\"C05\">Rosslyn</option>\n                    <option value=\"A15\">Shady Grove (Final Station - Red)</option>\n                    <option value=\"E02\">Shaw-Howard U</option>\n                    <option value=\"B08\">Silver Spring</option>\n                    <option value=\"D02\">Smithsonian</option>\n                    <option value=\"F08\">Southern Avenue</option>\n                    <option value=\"N04\">Spring Hill</option>\n                    <option value=\"D08\">Stadium-Armory</option>\n                    <option value=\"F10\">Suitland</option>\n                    <option value=\"B07\">Takoma</option>\n                    <option value=\"A07\">Tenleytown-AU</option>\n                    <option value=\"A13\">Twinbrook</option>\n                    <option value=\"N02\">Tysons Corner</option>\n                    <option value=\"E03\">U Street/African-Amer Civil War Memorial/Cardozo</option>\n                    <option value=\"B03\">Union Station</option>\n                    <option value=\"J02\">Van Dorn Street</option>\n                    <option value=\"A06\">Van Ness-UDC</option>\n                    <option value=\"K08\">Vienna/Fairfax-GMU (Final Station - Orange)</option>\n                    <option value=\"K03\">Virginia Square-GMU</option>\n                    <option value=\"F04\">Waterfront</option>\n                    <option value=\"K06\">West Falls Church-VT/UVA</option>\n                    <option value=\"E07\">West Hyattsville</option>\n                    <option value=\"B10\">Wheaton</option>\n                    <option value=\"A12\">White Flint</option>\n                    <option value=\"N06\">Wiehle-Reston East (Final Station - Silver)</option>\n                    <option value=\"A04\">Woodley Park-Zoo/Adams Morgan</option>\n\n                </select>\n            </form>\n\n            <button onClick={this.onSubmit}>Submit</button>\n            <br/>\n            <div id=\"apiNote\">\n                Note: May not display arrival information for final stations. \n                <br/>\n                This is a known issue with the WMATA API.\n            </div>\n\n        </div>\n\n        <section className=\"results\">\n            <div className=\"resultsInner\">\n            {this.state.metroData.map((train, index) => {\n                return (\n                    <Trains \n                        className=\"trainArrivals\"\n                        key={index}\n                        line={train.Line}\n                        destination={train.DestinationName}\n                        location={train.LocationName}\n                        min={train.Min}\n                        cars={train.Car}\n                    />\n                )\n            })}\n            </div>\n        </section>\n\n        <footer className=\"footer\">\n            <a href=\"https://www.wmata.com/\"><img id=\"metroLogo\" src={logo} alt=\"wmata logo\"/></a>\n\n            <p id=\"power\">Powered by <a href=\"https://developer.wmata.com/\">WMATA API</a></p>\n        </footer>\n\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}